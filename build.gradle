/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
println """
*******************************************
 Building Pixole Studios Proc-Gen
 Output files will be in ${rootDir}/build/libs
*******************************************
"""

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'

mainClassName = 'main.java.com.pixolestudios.procgen.MapGenMain'

sourceSets.main.java.srcDirs = ['src']

sourceCompatibility = 1.8

ext.buildNumber = System.getenv("BUILD_NUMBER") ?: "dev"
version 'Stable'

task start(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "main.java.com.pixolestudios.procgen.MapGenMain"
}

jar {
    manifest {
        attributes 'Main-Class': 'main.java.com.pixolestudios.procgen.MapGenMain'
    }
}
dependencies {
    testCompile 'junit:junit:4.12'
    compile 'junit:junit:4.12'
    compile name : 'plogger-1.1.0-alpha'
}
repositories {
    mavenCentral()
    flatDir {
        dirs 'src/libs'
    }
}

test.doFirst {
    delete "${rootDir}/src/test/java/com/pixolestudios/procgen/testout/"
    println "Deleting test output directory: ${rootDir}/src/test/java/com/pixolestudios/procgen/testout/"
}

test {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

// JaCoCo configuration
test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = [ //Excludes main class, ui classes and test classes from coverage check
                    'main.java.com.pixolestudios.procgen.MapGenMain',
                    'main.java.com.pixolestudios.uiUtils.*',
                    'com.pixolestudios.procgen.JUnitFrameworkTest',
                    'com.pixolestudios.procgen.MapGridTest',
                    'com.pixolestudios.procgen.ImageGenTest',
                    'main.java.com.pixolestudios.exceptions.NoPPGSelectedException'
            ]
        }
    }
}
